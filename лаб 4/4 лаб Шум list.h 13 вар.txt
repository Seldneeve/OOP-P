// list.h - заголовочный файл для серверного класса List
#ifndef LIST_H
#define LIST_H

#include <memory>
#include <stdexcept>

template <typename T>
struct Node {
    T value;
    std::shared_ptr<Node<T>> next;
    std::weak_ptr<Node<T>> prev;
};

template <typename T>
class List {
public:
    std::shared_ptr<Node<T>> head;
    std::shared_ptr<Node<T>> tail;

    List() : head(nullptr), tail(nullptr) {}

    void push_back(const T& value) {
        auto new_node = std::make_shared<Node<T>>();
        new_node->value = value;
        if (!tail) {
            head = tail = new_node;
        }
        else {
            new_node->prev = tail;
            tail->next = new_node;
            tail = new_node;
        }
    }

    void push_front(const T& value) {
        auto new_node = std::make_shared<Node<T>>();
        new_node->value = value;
        if (!head) {
            head = tail = new_node;
        }
        else {
            new_node->next = head;
            head->prev = new_node;
            head = new_node;
        }
    }

    void pop_back() {
        if (!tail) {
            throw std::runtime_error("Deque is empty");
        }
        if (tail == head) {
            head = tail = nullptr;
        }
        else {
            tail = tail->prev.lock();
            tail->next.reset();
        }
    }

    void pop_front() {
        if (!head) {
            throw std::runtime_error("Deque is empty");
        }
        if (head == tail) {
            head = tail = nullptr;
        }
        else {
            head = head->next;
            head->prev.reset();
        }
    }

    T& front() {
        if (!head) {
            throw std::runtime_error("Deque is empty");
        }
        return head->value;
    }

    T& back() {
        if (!tail) {
            throw std::runtime_error("Deque is empty");
        }
        return tail->value;
    }

    bool empty() const {
        return !head;
    }

    size_t size() const {
        size_t size = 0;
        auto current = head;
        while (current) {
            size++;
            current = current->next;
        }
        return size;
    }
};

#endif // LIST_H
